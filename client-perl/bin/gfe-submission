#!/usr/bin/env perl
=head1 NAME

    gfe-submission

=head1 SYNOPSIS
    

=head1 AUTHOR     Mike Halagan <mhalagan@nmdp.org>
    
    Bioinformatics Scientist
    3001 Broadway Stree NE
    Minneapolis, MN 55413
    ext. 8225

=head1 DESCRIPTION


=head1 CAVEATS


=head1 LICENSE

    Copyright (c) 2015 National Marrow Donor Program (NMDP)

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
    License for more details.
 
    You should have received a copy of the GNU Lesser General Public License
    along with this library;  if not, write to the Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

    > http://www.gnu.org/licenses/lgpl.html

=head1 VERSIONS
    
    Version    Description              Date


=head1 TODO
    

=head1 SUBROUTINES

=cut
use strict;    # always
use warnings;  # or else
use FindBin;
use vars qw($USAGE);
BEGIN{

    $| = 1;

    $USAGE = 
        qq{./gfe-submission [--fasta] [--uri] [--verbose] [--help]
            -f/--fasta      Fasta file
            -u/--uri        URI of feature service
            -l/--locus      HLA-Locus
            -v/--verbose    Flag for running in verbose
            -h/--help
        };

}   
use Getopt::Long;
use lib "$FindBin::Bin/../lib";
use GFE_Client;
use Data::Dumper;

our($s_fasta,$s_locus,$b_verbose,$help,$s_url,$s_feature_url) = (undef,undef,undef,undef,"http://localhost:5000","http://feature.nmdp-bioinformatics.org");

&GetOptions('fasta|i=s'      => \$s_fasta,
            'url|u=s'        => \$s_url,
            'feature|f=s'    => \$s_feature_url,
            'locus|l=s'      => \$s_locus,
            'verbose|v'      => \$b_verbose,
            'help|h'         => \$help,
            );
# --help
if($help){
    exec('perldoc',$0);
    die;
}

my $rh_seq;
if(defined $s_fasta && -e $s_fasta){
    $rh_seq = read_fasta_file($s_fasta);
}else{ die "Fasta file not provided!";}


foreach my $s_seq (keys %$rh_seq){
    my $rh_gfe = GFE_Client::getGfe($s_locus,$s_seq,$s_url,$s_feature_url);
    if(!defined $$rh_gfe{gfe}){
        print STDERR Dumper($$rh_gfe{Error}),"\n";
    }else{
        print join("\t",$s_seq,$$rh_gfe{gfe}),"\n";
    }
}


sub read_fasta_file {

    my $fasta_file = shift;
    my %seqs;
    my $header;
    my $seq;
    open (my $fh_seq,"<", $fasta_file) or die "can't open $fasta_file: $!\n";
    while (<$fh_seq>) {
        chomp;
        if ($_ =~ />/) {
            if ($seq) {    
                $seqs{$header} = $seq;
            }              
            $header = $_;
            $header =~ s/^>//; # remove ">"
            $header =~ s/\s+$//; # remove trailing whitespace
            $seq = ""; # clear out old sequence
        }else {    
            s/\s+//g; # remove whitespace
            $seq .= $_; # add sequence
        }         
    }    
    close $fh_seq; # finished with file

    if ($seq) { # handle last sequence
        $seqs{$header} = $seq;
    }    

    return \%seqs;
}


















